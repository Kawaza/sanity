const lighthouseBatch = require('lighthouse-batch');
const path = require('path');
const fs = require('fs');
const archiver = require('archiver');

exports.handler = async (event) => {
    const { urls } = JSON.parse(event.body);
    const outputDir = path.join(__dirname, 'reports');
    
    try {
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir);
        }
        await lighthouseBatch(urls, { output: outputDir });
        
        const reportZip = path.join(outputDir, 'lighthouse-reports.zip');
        await createZip(outputDir, reportZip);

        return {
            statusCode: 200,
            body: JSON.stringify({ reportLink: `/api/reports/lighthouse-reports.zip` }),
        };
    } catch (error) {
        console.error('Error generating Lighthouse reports:', error);
        return {
            statusCode: 500,
            body: 'Error generating reports',
        };
    }
};

async function createZip(sourceDir, outPath) {
    return new Promise((resolve, reject) => {
        const output = fs.createWriteStream(outPath);
        const archive = archiver('zip', { zlib: { level: 9 } });

        output.on('close', () => resolve());
        archive.on('error', (err) => reject(err));

        archive.pipe(output);
        archive.directory(sourceDir, false);
        archive.finalize();
    });
}
